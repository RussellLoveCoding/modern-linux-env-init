// Place your key bindings in this file to override the defaultsauto[]
[
    // customized
    

    
    //{
    //    "key": "shift+enter",
    //    "command": "extension.jumpy-word",
    //    "when": "editorTextFocus"
    //},
    //{
    //    "key": "Escape",
    //    "command": "extension.jumpy-exit",
    //    "when": "editorTextFocus && jumpy.isJumpyMode"
    //},
    {
        "key": "ctrl+shift+l",
        "command": "settings.cycle",
        "when": "editorTextFocus",
        "args": {
            "id": "relativeLineNumbers",
            "values": [
                {
                    "editor.lineNumbers": "on"
                },
                {
                    "editor.lineNumbers": "relative"
                }
            ]
        }
    },
    {
        "key": "ctrl+h",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.navigateUp"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "ctrl+left",
        "command": "cjkWordHandler.cursorWordStartLeft",
        "when": "editorTextFocus"
    },
    // jumpy
    // {
    //     "key": "ctrl+j",
    //     "command": "-extension.vim_ctrl+j",
    //     "when": "editorTextFocus && vim.active && vim.use<C-j> && !inDebugRepl"
    // },
    {
        "key": "alt+j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "alt+o",
        "command": "workbench.action.files.openFile"
    },
    {
        "key": "ctrl+o",
        "command": "-workbench.action.files.openFile"
    },
    {
        "key": "alt+p",
        "command": "workbench.action.quickOpen"
    },
    {
        "key": "ctrl+p",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "shift+alt+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+shift+p",
        "command": "-workbench.action.showCommands"
    },
    {
        "key": "alt+b",
        "command": "-gitlens.toggleFileBlame",
        "when": "editorTextFocus && config.gitlens.keymap == 'alternate' && gitlens:activeFileStatus =~ /blameable/"
    },
    {
        "key": "alt+b",
        "command": "workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility"
    },
    {
        "key": "alt+oem_comma",
        "command": "workbench.action.openSettings"
    },
    {
        "key": "ctrl+oem_comma",
        "command": "-workbench.action.openSettings"
    },
    {
        "key": "alt+w",
        "command": "-workbench.action.terminal.toggleFindWholeWord",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchEditorWholeWord",
        "when": "inSearchEditor && searchInputBoxFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleFindWholeWord",
        "when": "editorFocus"
    },
    {
        "key": "alt+w",
        "command": "-toggleSearchWholeWord",
        "when": "searchViewletFocus"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeWindow",
        "when": "!editorIsOpen && !multipleEditorGroups"
    },
    {
        "key": "alt+w",
        "command": "workbench.action.closeActiveEditor"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeActiveEditor"
    },
    {
        "key": "shift+alt+w",
        "command": "workbench.action.closeWindow"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "alt+f",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "alt+f",
        "command": "settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "ctrl+f",
        "command": "-settings.action.search",
        "when": "inSettingsEditor"
    },
    {
        "key": "alt+f",
        "command": "repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "ctrl+f",
        "command": "-repl.action.filter",
        "when": "inDebugRepl && textInputFocus"
    },
    {
        "key": "alt+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+f",
        "command": "editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.extensioneditor.showfind",
        "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
    },
    {
        "key": "alt+f",
        "command": "editor.action.webvieweditor.showFind",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "-editor.action.webvieweditor.showFind",
        "when": "webviewFindWidgetEnabled && !editorFocus && activeEditor == 'WebviewEditor'"
    },
    {
        "key": "ctrl+f",
        "command": "extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+f",
        "command": "-extension.vim_ctrl+f",
        "when": "editorTextFocus && vim.active && vim.use<C-f> && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "alt+f",
        "command": "keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "ctrl+f",
        "command": "-keybindings.editor.searchKeybindings",
        "when": "inKeybindings"
    },
    {
        "key": "alt+f",
        "command": "notebook.find",
        "when": "notebookEditorFocused || notebookEditorOpen"
    },
    {
        "key": "ctrl+f",
        "command": "-notebook.find",
        "when": "notebookEditorFocused || notebookEditorOpen"
    },
    {
        "key": "alt+f",
        "command": "problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "ctrl+f",
        "command": "-problems.action.focusFilter",
        "when": "focusedView == 'workbench.panel.markers.view'"
    },
    {
        "key": "alt+k alt+t",
        "command": "leetcode.testSolution"
    },
    {
        "key": "alt+k alt+s",
        "command": "leetcode.submitSolution"
    },
    {
        "key": "alt+oem_6",
        "command": "editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_6",
        "command": "-editor.action.indentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+oem_4",
        "command": "editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+oem_4",
        "command": "-editor.action.outdentLines",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+v",
        "command": "editor.action.clipboardPasteAction"
    },
    {
        "key": "ctrl+v",
        "command": "-editor.action.clipboardPasteAction"
    },
    {
        "key": "alt+c",
        "command": "editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "-editor.action.clipboardCopyAction"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.commits.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.branches.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.contributors.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.fileHistory.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.lineHistory.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.remotes.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.repositories.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.searchAndCompare.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.stashes.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
    },
    {
        "key": "ctrl+c",
        "command": "-gitlens.views.tags.copy",
        "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
    },
    {
        "key": "alt+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "alt+c",
        "command": "sqltools.copyTextFromTreeItem",
        "when": "sideBarFocus && focusedView == 'sqltools-view-connectionExplorer'"
    },
    {
        "key": "ctrl+c",
        "command": "-sqltools.copyTextFromTreeItem",
        "when": "sideBarFocus && focusedView == 'sqltools-view-connectionExplorer'"
    },
    {
        "key": "alt+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.terminal.killEditor",
        "when": "terminalEditorFocus && terminalFocus && terminalProcessSupported && resourceScheme == 'vscode-terminal'"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.closeGroup",
        "when": "activeEditorGroupEmpty && multipleEditorGroups"
    },
    {
        "key": "ctrl+shift+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "alt+f",
        "command": "notebook.find",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "ctrl+f",
        "command": "-notebook.find",
        "when": "notebookEditorFocused && !editorFocus && activeEditor == 'workbench.editor.notebook'"
    },
    {
        "key": "s a",
        "command": "workbench.action.files.save",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "s",
        "command": "-workbench.action.files.save",
        "when": "notebookEditorFocused && !inputFocus"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-snippet.findSelectedText",
        "when": "editorHasSelection"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveLocalFile",
        "when": "remoteFileDialogVisible"
    },
    {
        "key": "ctrl+shift+s",
        "command": "-workbench.action.files.saveAs"
    },
    {
        "key": "ctrl+s",
        "command": "-workbench.action.files.save"
    },
    {
        "key": "ctrl+s",
        "command": "-issue.createIssueFromFile",
        "when": "!issues.creatingFromFile && resourceScheme == 'newIssue' && config.files.autoSave != 'off'"
    },
    {
        "key": "shift+f12",
        "command": "-editor.action.goToReferences",
        "when": "editorHasReferenceProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
    },
    {
        "key": "f12",
        "command": "-editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
    },
    {
        "key": "g g",
        "command": "-list.focusFirst",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    }
]